"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.composer = void 0;
const grammy_1 = require("grammy");
const database_1 = require("../../database");
const getUsername_1 = require("../../helpers/getUsername");
exports.composer = new grammy_1.Composer();
const regex = /mentors (?<choice>\w+) (?<userId>\d+) (?<mentorid>\d+)/;
exports.composer.callbackQuery(regex, callbackHandler);
async function callbackHandler(ctx) {
    const match = regex.exec(ctx.match[0]);
    const userId = match.groups.userId;
    const mentorId = match.groups.mentorid;
    const choice = match.groups.choice;
    if (choice === 'accept') {
        await ctx.deleteMessage();
        const user = await database_1.userRepository.findOne({
            where: {
                id: Number(userId)
            }
        });
        if (user.mentor) {
            return ctx.reply(`‚ùó –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${await (0, getUsername_1.getUsername)(user, true, true)} —É–∂–µ –µ—Å—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "–ó–∞–∫—Ä—ã—Ç—å", callback_data: `deleteThisMessage` }]
                    ]
                }
            });
        }
        const mentor = await database_1.mentorsRepository.findOne({
            where: { id: Number(mentorId) }
        });
        if (!mentor) {
            return ctx.reply(`–ú–µ–Ω—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
        user.mentor = mentor;
        await database_1.userRepository.save(user);
        await ctx.reply(`üß∏ –¢—ã –ø—Ä–∏–Ω—è–ª –≤ —Å–æ—Å—Ç–∞–≤ ${await (0, getUsername_1.getUsername)(user, true, true)}`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "–ó–∞–∫—Ä—ã—Ç—å", callback_data: `deleteThisMessage` }]
                ]
            }
        });
        return ctx.api.sendMessage(user.tgId, `üß∏ –¢–µ–±—è –ø—Ä–∏–Ω—è–ª –≤ —É—á–µ–Ω–∏–∫–∏ ${await (0, getUsername_1.getUsername)(ctx.user, true, true)}`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "–ó–∞–∫—Ä—ã—Ç—å", callback_data: `deleteThisMessage` }]
                ]
            }
        });
    }
    if (choice === 'cancel') {
        const user = await database_1.userRepository.findOne({
            where: {
                id: Number(userId)
            }
        });
        await ctx.deleteMessage();
        await ctx.reply(`üß∏ –¢—ã –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å ${await (0, getUsername_1.getUsername)(user)}`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "–ó–∞–∫—Ä—ã—Ç—å", callback_data: `deleteThisMessage` }]
                ]
            }
        });
        return ctx.api.sendMessage(user.tgId, `üß∏ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫ ${await (0, getUsername_1.getUsername)(ctx.user, true, true)} –æ—Ç–∫–ª–æ–Ω–∏–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "–ó–∞–∫—Ä—ã—Ç—å", callback_data: `deleteThisMessage` }]
                ]
            }
        });
    }
}
