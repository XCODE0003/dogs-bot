"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.composer = void 0;
const grammy_1 = require("grammy");
const getUsername_1 = require("../../helpers/getUsername");
const database_1 = require("../../database");
const console_1 = __importDefault(require("console"));
const regex = /admin set proStatus (?<userId>\d+)/gmsi;
exports.composer = new grammy_1.Composer();
exports.composer.callbackQuery(regex, handler);
async function handler(ctx) {
    const match = regex.exec(ctx.callbackQuery.data);
    const userId = Number(match.groups.userId);
    const user = await database_1.userRepository.findOne({
        where: {
            id: userId
        }
    });
    if (!user) {
        return ctx.reply(`User undefined`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ó–∞–∫—Ä—ã—Ç—å', callback_data: `deleteThisMessage` }]
                ]
            }
        });
    }
    user.isPro = (!user.isPro);
    await database_1.userRepository.save(user);
    if (user.isPro) {
        try {
            await ctx.api.sendMessage(user.tgId, `
‚¨ÜÔ∏è –¢–µ–±—è –ø–æ–≤—ã—Å–∏–ª–∏ –¥–æ —Å—Ç–∞—Ç—É—Å–∞ PRO ‚¨ÜÔ∏è

üåø –¢–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–ª–∞—Ç –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –Ω–∞ 10% - –≤–º–µ—Å—Ç–æ 60%, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 70% üìà
üåê –û—Ç–¥–µ–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ "PRO –≤–æ—Ä–∫–µ—Ä–∞–º".
üí¨ –û—Ç–¥–µ–ª—å–Ω—ã–π —á–∞—Ç –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö –∫–æ–∞–ª "PRO".
üì® –û—Ç–¥–µ–ª—å–Ω—ã–µ —à–ª—é–∑—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ email.
ü´£ –¢–µ–≥ "PRO" –≤ —á–∞—Ç–∞—Ö, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–µ–º —Ç–µ–±–µ –µ–≥–æ –Ω–µ —Å—Ç–∞–≤–∏—Ç—å.
üí∞ PRO-–≤–æ—Ä–∫–µ—Ä–∞–º –≤—ã–¥–∞–µ—Ç—Å—è –±—é–¥–∂–µ—Ç –Ω–∞ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã/–Ω–æ–º–µ—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É.
üõ† –î–æ–±–∞–≤–∏–º –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É –ø–æ–¥ –≤–æ—Ä–∫, —Ç–∞–∫ –∂–µ –º–æ–∂–µ–º –µ–µ —Å–∫—Ä—ã—Ç—å –¥–ª—è –≤–∞—Å.
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "üê® PRO –ß–ê–¢", url: 'https://t.me/+45tu1EbZZ1QyN2My' }]
                    ]
                }
            });
        }
        catch (e) {
            console_1.default.log(e);
        }
    }
    return ctx.reply(`${await (0, getUsername_1.getUsername)(user)} —Ç–µ–ø–µ—Ä—å${(user.isPro) ? '' : ' –Ω–µ'} PRO`, {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ó–∞–∫—Ä—ã—Ç—å', callback_data: `deleteThisMessage` }],
            ]
        }
    });
}
