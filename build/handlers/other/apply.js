"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.scene = exports.composer = void 0;
const grammy_scenes_1 = require("grammy-scenes");
const grammy_1 = require("grammy");
const deleteAllMessages_1 = require("../../helpers/deleteAllMessages");
const user_1 = require("../../database/models/user");
const setupSession_1 = require("../../utils/setupSession");
const config_1 = require("../../utils/config");
const database_1 = require("../../database");
exports.composer = new grammy_1.Composer();
const regex = /apply/gmi;
exports.composer.callbackQuery(regex, startScene);
async function startScene(ctx) {
    await ctx.deleteMessage();
    return ctx.scenes.enter('apply');
}
exports.scene = new grammy_scenes_1.Scene('apply');
async function cancel(ctx) {
    await (0, deleteAllMessages_1.deleteAllMessages)(ctx.session.deleteMessage, ctx);
    setupSession_1.redis.set(`cons-${ctx.from.id}`, '0');
    setupSession_1.redis.save();
    try {
        ctx.scene.exit();
    }
    catch (e) { }
    return ctx.reply(`<b>–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.</b>
<b>–ö–æ–Ω—Ç–∞–∫—Ç –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∞—á–µ–π –∑–∞—è–≤–∫–∏</b> @scarllet_dev
`, {
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚ôªÔ∏è', callback_data: 'apply' }]
            ]
        }
    });
}
async function cancel2(ctx) {
    await (0, deleteAllMessages_1.deleteAllMessages)(ctx.session.deleteMessage, ctx);
    setupSession_1.redis.set(`cons-${ctx.from.id}`, '0');
    setupSession_1.redis.save();
    try {
        ctx.scene.exit();
    }
    catch (e) { }
}
exports.scene.always().callbackQuery('cancel apply', cancel);
exports.scene.do(async (ctx) => {
    setupSession_1.redis.set(`cons-${ctx.from.id}`, '1');
    setupSession_1.redis.save();
    ctx.session.deleteMessage = [];
    ctx.session.text = `<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\n <b>User:</b> @${ctx.from?.username} [${ctx.from.id}]`;
    if (ctx.user.role !== user_1.UserRole.RANDOM) {
        return ctx.reply(`üòî –¢–µ–±–µ —É–∂–µ –Ω–µ–ª—å–∑—è –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ó–∞–∫—Ä—ã—Ç—å', callback_data: 'deleteThisMessage' }]
                ]
            }
        });
    }
    const response = await ctx.reply(`
–û—Ç –∫–æ–≥–æ —É–∑–Ω–∞–ª –æ –Ω–∞—Å (—É–∫–∞–∂–∏ —Ç–≥)
`, {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel apply' }]
            ]
        }
    });
    ctx.session.deleteMessage.push(response.message_id);
    ctx.scene.resume();
});
exports.scene.wait().on('message', async (ctx) => {
    ctx.session.text += `\n\n1. ${ctx.msg.text}`;
    const response = await ctx.reply(`
–ì–¥–µ —Ä–∞–Ω—å—à–µ –≤–æ—Ä–∫–∞–ª?`, {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel apply' }]
            ]
        }
    });
    ctx.session.deleteMessage.push(response.message_id);
    ctx.session.deleteMessage.push(ctx.msg.message_id);
    ctx.scene.resume();
});
exports.scene.wait().on('message:text', async (ctx) => {
    ctx.session.text += `\n2. ${ctx.msg.text}`;
    const response = await ctx.reply(`
–ü–æ—á–µ–º—É —É—à–µ–ª –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã?`, {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel apply' }]
            ]
        }
    });
    ctx.session.deleteMessage.push(response.message_id);
    ctx.session.deleteMessage.push(ctx.msg.message_id);
    ctx.scene.resume();
});
exports.scene.wait().on('message:text', async (ctx) => {
    ctx.session.text += `\n3. ${ctx.msg.text}`;
    await ctx.api.sendMessage(config_1.config.chats.applications, ctx.session.text, {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'ü™¥ –ü—Ä–∏–Ω—è—Ç—å', callback_data: `admin accept ${ctx.from.id}` }],
                [{ text: 'üêæ –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `admin decline ${ctx.from.id}` }]
            ]
        }
    })
        .then(async (res) => {
        ctx.user.role = user_1.UserRole.CONSIDERATION;
        await database_1.userRepository.save(ctx.user);
        setupSession_1.redis.set(`cons-${ctx.from.id}`, '0');
        setupSession_1.redis.save();
        await ctx.reply(`
<b>–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞, –æ–∂–∏–¥–∞–π –ø—Ä–æ–≤–µ—Ä–∫—É!</b>`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ó–∞–∫—Ä—ã—Ç—å', callback_data: 'deleteThisMessage' }]
                ]
            }
        });
        ctx.session.deleteMessage.push(ctx.msg.message_id);
        return cancel2(ctx);
    })
        .catch(async (error) => {
        setupSession_1.redis.set(`cons-${ctx.from.id}`, '0');
        setupSession_1.redis.save();
        await cancel(ctx);
        return await ctx.reply(`
<b>‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ</b>\n ${error.toString()}`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ôªÔ∏è –ó–∞–Ω–æ–≤–æ', callback_data: 'apply' }],
                ]
            }
        });
    });
});
