import {Composer} from "grammy";
import {Context} from "@/database/models/context";
import {profilesRepository} from "@/database";
import {getFlagEmoji} from "@/helpers/getFlagEmoji";

export const composer = new Composer<Context>()
const regex = /profiles info (?<id>\d+)/gmi
composer.callbackQuery(regex, handler)

async function handler(ctx: Context) {
    const match = regex.exec(ctx.callbackQuery.data)
    const id = Number(match.groups.id)
    const profile = await profilesRepository.findOne({
        where: {
            id
        }
    })

    if (!profile) {
        return ctx.reply(`–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω`, {
            reply_markup: {
                inline_keyboard: [
                    [{text: '–ó–∞–∫—Ä—ã—Ç—å', callback_data: 'deleteThisMessage'}]
                ]
            }
        })
    }

    let text = `<b>${getFlagEmoji(profile.country)} ${profile.service.toUpperCase()}</b>`
    text += `\n\n<b>üë§ –§–ò–û:</b> <code>${profile.fullName}</code>`
    text += `\n<b>üèò –î–æ—Å—Ç–∞–≤–∫–∞:</b> <code>${profile.delivery}</code>`
    text += `\n<b>üì≤ –ù–æ–º–µ—Ä:</b> <code>${profile.phone}</code>`

    return ctx.reply(text, {
        reply_markup: {
            inline_keyboard: [
                [{text: 'üë§ –°–º–µ–Ω–∏—Ç—å –§–ò–û', callback_data: `profile set fullname ${profile.id}`}],
                [{text: 'üì≤ –°–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', callback_data: `profile set phone ${profile.id}`}],
                [{text: 'üèò –°–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å', callback_data: `profile set delivery ${profile.id}`}],
                [{text: 'üêæ –£–¥–∞–ª–∏—Ç—å', callback_data: `profile delete ${profile.id} question`}],
                [{text: '–ó–∞–∫—Ä—ã—Ç—å', callback_data: 'deleteThisMessage'}]
            ]
        }
    })
}