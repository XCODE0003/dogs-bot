import {Context} from "@/database/models/context";
import {Composer} from "grammy";
import {mentorsRepository, profitRepository, userRepository} from "@/database";
import {getUsername} from "@/helpers/getUsername";
import {User, UserRole} from "@/database/models/user";
import {isSuperAdmin} from "@/helpers/isSuperAdmin";
import moment from "moment";
import {getPictureMenu} from "@/helpers/getPictureMenu";

const regex = /admin user (?<tgId>\d+)/gmsi
const regexMSG = /\/admin\s+user\s+(?<tgId>\d+)/gmsi
export const composer = new Composer<Context>()
composer.callbackQuery(regex, handler)
composer.hears(regexMSG, handler)

async function handler(ctx: Context)  {
    let match = undefined
    if (ctx?.callbackQuery?.data) {
        match = regex.exec(ctx.callbackQuery.data)
    } else  { match = regexMSG.exec(ctx.message.text) }

    const tgId = Number(match.groups.tgId)

    const user = await userRepository.findOne({
        where: {
            tgId
        }
    })

    if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', {reply_markup: {inline_keyboard: [ [{text: 'OK', callback_data: 'deleteThisMessage'}] ]}})

    const stats = await getStats(user)
    let text = ''
    text += `üê® –í–æ—Ä–∫–µ—Ä: ${await getUsername(user, true)}`
    text += `\nüå± ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>${user.tgId}</code>`

    text += `\n\nüå≥ –†–æ–ª—å: <code>${(user.role === UserRole.VBIVER) ? '–í–±–∏–≤–µ—Ä' : (user.role === UserRole.WORKER) ? '–í–æ—Ä–∫–µ—Ä' : (user.role === UserRole.CONSIDERATION) ? '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏': (user.role === UserRole.NOTACCEPT) ? '–û—Ç–∫–ª–æ–Ω–µ–Ω' : (user.role === UserRole.BAN) ? '–ó–∞–±–∞–Ω–µ–Ω' : (user.role === UserRole.RANDOM) ? '–ï—â–µ –Ω–µ –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É' : '—Ö–∑) –∫–æ–¥–µ—Ä—É –Ω–∞–ø–∏—à–∏—Ç–µ'}</code>`
    text += `\nüëë –ê–¥–º–∏–Ω: <code>${(user.admin) ? "–î–∞" : "–ù–µ—Ç"}</code>`
    text += `\n\nüì• üì≤: <code>${user.sms}</code>`
    text += `\nüíå EMAIL: <code>${user.email}</code>`

    text += `\n\n‚ûñ<b>–ó–∞—Å–ª—É–≥–∏ –Ω–∞ —Ä–æ–ª–∏ –≤–æ—Ä–∫–µ—Ä–∞</b>‚ûñ`
    text += `\nüî• –í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <code>${stats.workerStats.length}</code>`
    text += `\nüí∞ –ù–∞ —Å—É–º—É: <code>${stats.workerStats.amount}</code>`

    text += `\n\n‚ûñ<b>–ó–∞—Å–ª—É–≥–∏ –Ω–∞ —Ä–æ–ª–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞</b>‚ûñ`
    text += `\nüî• –í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤ —É—á–µ–Ω–∏–∫–æ–≤: <code>${stats.mentorStats.length}</code>`
    text += `\nüí∞ –ù–∞ —Å—É–º—É: <code>${stats.mentorStats.amount}</code>`

    text += `\n\n<b>–ó–∞—Å–ª—É–≥–∏ –Ω–∞ —Ä–æ–ª–∏ –≤–±–∏–≤–µ—Ä–∞</b>‚ûñ`
    text += `\nüî• –í—Å–µ–≥–æ –≤–ø–∏—Å–∞–Ω–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <code>${stats.vbiverStats.length}</code>`
    text += `\nüí∞ –ù–∞ —Å—É–º—É: <code>${stats.vbiverStats.amount}</code>`

    text += `\n\n‚åöÔ∏è –í –∫–æ–º–∞–Ω–¥–µ ${moment(new Date(user.created)).fromNow()}`

    const options = {
        caption: 'a',
        reply_markup: {
            inline_keyboard: [
                [{text: 'üíå SMS / EMAIL', callback_data: `/admin mailing ${user.tgId}`}],
                [{text: 'üí≥ –í–ë–ò–í–ï–†', callback_data: `/admin vbiver ${user.tgId}`}],
                [{text: 'üê≤ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫', callback_data: `/admin mentor ${user.tgId}`},{text: 'üêâ –¢–ü', callback_data: `/admin support ${user.tgId}`}],
            ]
        }
    }

    if (user.tgId !== ctx.from.id) {
        options.reply_markup.inline_keyboard.push(
            [{text: `‚õîÔ∏è ${(user.role === UserRole.BAN) ? '–†–∞–∑–±–∞–Ω–∏—Ç—å' : '–ó–∞–±–∞–Ω–∏—Ç—å'}`, callback_data: `admin ban ${user.tgId} choice`}],
            [{text: `ü¶ß –ö–∏–∫–Ω—É—Ç—å`, callback_data: `admin kick ${user.tgId} choice`}],
        )
    }


    // options.reply_markup.inline_keyboard.push(
    //     [{text: "üê® –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data: `admin menu`},{text: "üåø –ú–µ–Ω—é", callback_data: `menu`}],
    // )

    options.reply_markup.inline_keyboard.push(
        [{text: (!ctx.user.isPro) ? 'üëë –°–¥–µ–ª–∞—Ç—å PRO' : 'üêæ –£–±—Ä–∞—Ç—å PRO', callback_data: `admin set proStatus ${user.id}`}]
    )

    options.reply_markup.inline_keyboard.push(
        [{text: "–ó–∞–∫—Ä—ã—Ç—å", callback_data: `deleteThisMessage`}]
    )

    if (isSuperAdmin(ctx) && user.tgId !== ctx.from.id) {
        let text = `${(user.admin) ? 'üêæ –£–±—Ä–∞—Ç—å –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' : 'üëç –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'}`
        options.reply_markup.inline_keyboard.push(
            [{text: text, callback_data: `admin set admin ${(user.admin) ? 'false' : 'true'} ${user.id}`}]
        )
    }

    options.caption = text

    if (ctx?.callbackQuery?.data)
        return ctx.editMessageText(text, options)
    return ctx.replyWithPhoto(await getPictureMenu(ctx.user), options)
}

async function getStats(user: User) {
    const mentorStats = {length: 0, amount: 0}
    const vbiverStats = {length: 0, amount: 0}
    const workerStats = {length: 0, amount: 0}

    const mentor = await mentorsRepository.findOne({
        where: {
            user
        }
    })

    if (mentor) {
        const profits = await profitRepository.find({
            where: {
                mentor: mentor
            }
        })
        let amount = 0
        for (const obj of profits) {
            amount += obj.mentorValue
        }

        mentorStats['length'] = profits.length
        mentorStats['amount'] = amount
    }

    if (user.role === UserRole.VBIVER) {
        const vbiver = await profitRepository.find({
            where: {
                vbiver: user
            }
        })
        let amount = 0
        for (const obj of vbiver) {
            amount += obj.value
        }

        vbiverStats['length'] = vbiver.length
        vbiverStats['amount'] = amount
    }

    const workerProfits = await profitRepository.find({
        where: {
            worker: user
        }
    })

    let amount = 0
    for (const obj of workerProfits) {
        amount += obj.value
    }

    workerStats['length'] = workerProfits.length
    workerStats['amount'] = amount

    return {
        vbiverStats,
        mentorStats,
        workerStats
    }
}