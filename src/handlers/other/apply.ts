import {Context} from "@/database/models/context";
import {Scene} from "grammy-scenes";
import {Composer} from "grammy";
import {deleteAllMessages} from "@/helpers/deleteAllMessages";
import {UserRole} from "@/database/models/user";
import {redis} from "@/utils/setupSession";
import {config} from "@/utils/config";
import {userRepository} from "@/database";

export const composer = new Composer<Context>()
const regex = /apply/gmi
composer.callbackQuery(regex, startScene)

async function startScene(ctx: Context) {
    await ctx.deleteMessage()
    return ctx.scenes.enter('apply')
}

export const scene = new Scene<Context>('apply')

async function cancel (ctx) {
    await deleteAllMessages (ctx.session.deleteMessage,ctx)
    redis.set(`cons-${ctx.from.id}`, '0')
    redis.save()
    try {
        ctx.scene.exit()
    } catch (e) {}
    return ctx.reply(`<b>–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.</b>
<b>–ö–æ–Ω—Ç–∞–∫—Ç –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∞—á–µ–π –∑–∞—è–≤–∫–∏</b> @scarllet_dev
`, {
        reply_markup: {
            inline_keyboard: [
                [{text: '‚ôªÔ∏è', callback_data: 'apply'}]
            ]
        }
    })
}
async function cancel2 (ctx) {
    await deleteAllMessages (ctx.session.deleteMessage,ctx)
    redis.set(`cons-${ctx.from.id}`, '0')
    redis.save()
    try {
        ctx.scene.exit()
    } catch (e) {}
}

scene.always().callbackQuery('cancel apply', cancel)

scene.do(async (ctx) => {
    redis.set(`cons-${ctx.from.id}`, '1')
    redis.save()

    ctx.session.deleteMessage = []
    ctx.session.text = `<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\n <b>User:</b> @${ctx.from?.username} [${ctx.from.id}]`

    if (ctx.user.role !== UserRole.RANDOM) {
        return ctx.reply(`üòî –¢–µ–±–µ —É–∂–µ –Ω–µ–ª—å–∑—è –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É`, {
            reply_markup: {
                inline_keyboard: [
                    [{text: '–ó–∞–∫—Ä—ã—Ç—å', callback_data: 'deleteThisMessage'}]
                ]
            }
        })
    }

    const response = await ctx.reply(`
–û—Ç –∫–æ–≥–æ —É–∑–Ω–∞–ª –æ –Ω–∞—Å (—É–∫–∞–∂–∏ —Ç–≥)
`, {
        reply_markup: {
            inline_keyboard: [
                [{text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel apply'}]
            ]
        }
    })


    ctx.session.deleteMessage.push(response.message_id)
    ctx.scene.resume()
})

scene.wait().on('message', async ctx => {
    ctx.session.text += `\n\n1. ${ctx.msg.text}`

    const response = await ctx.reply(`
–ì–¥–µ —Ä–∞–Ω—å—à–µ –≤–æ—Ä–∫–∞–ª?`, {
        reply_markup: {
            inline_keyboard: [
                [{text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel apply'}]
            ]
        }
    })

    ctx.session.deleteMessage.push(response.message_id)
    ctx.session.deleteMessage.push(ctx.msg.message_id)
    ctx.scene.resume()
})

scene.wait().on('message:text', async ctx => {
    ctx.session.text += `\n2. ${ctx.msg.text}`

    const response = await ctx.reply(`
–ü–æ—á–µ–º—É —É—à–µ–ª –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã?`, {
        reply_markup: {
            inline_keyboard: [
                [{text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel apply'}]
            ]
        }
    })

    ctx.session.deleteMessage.push(response.message_id)
    ctx.session.deleteMessage.push(ctx.msg.message_id)
    ctx.scene.resume()
})

scene.wait().on('message:text', async ctx => {
    ctx.session.text += `\n3. ${ctx.msg.text}`

    await ctx.api.sendMessage(config.chats.applications, ctx.session.text, {
        reply_markup: {
            inline_keyboard: [
                [{text: 'ü™¥ –ü—Ä–∏–Ω—è—Ç—å', callback_data: `admin accept ${ctx.from.id}`}],
                [{text: 'üêæ –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `admin decline ${ctx.from.id}`}]
            ]
        }
    })
        .then(async res => {
            ctx.user.role = UserRole.CONSIDERATION
            await userRepository.save(ctx.user)
            redis.set(`cons-${ctx.from.id}`, '0')
            redis.save()
            await ctx.reply(`
<b>–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞, –æ–∂–∏–¥–∞–π –ø—Ä–æ–≤–µ—Ä–∫—É!</b>`, {
                reply_markup: {
                    inline_keyboard: [
                        [{text: '–ó–∞–∫—Ä—ã—Ç—å', callback_data: 'deleteThisMessage'}]
                    ]
                }
            })

            ctx.session.deleteMessage.push(ctx.msg.message_id)
            return cancel2(ctx)
        })
        .catch(async error => {
            redis.set(`cons-${ctx.from.id}`, '0')
            redis.save()
        await cancel(ctx)
        return await ctx.reply(`
<b>‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ</b>\n ${error.toString()}`, {
            reply_markup: {
                inline_keyboard: [
                    [{text: '‚ôªÔ∏è –ó–∞–Ω–æ–≤–æ', callback_data: 'apply'}],
                ]
            }
        })
    })
})